<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannnotSetPartyItselfAsContact" xml:space="preserve">
    <value>Cannnot set party itself as contact!</value>
  </data>
  <data name="CannotDeleteCompanyGroupParty" xml:space="preserve">
    <value>Can't delete Company Group Party!</value>
  </data>
  <data name="ContactNameCannotBeEmpty" xml:space="preserve">
    <value>Contact name cannot be empty</value>
  </data>
  <data name="CountryCodeCannotBeEmpty" xml:space="preserve">
    <value>Country code cannot be empty</value>
  </data>
  <data name="CountryNameCannotBeEmpty" xml:space="preserve">
    <value>Country name cannot be empty</value>
  </data>
  <data name="CustomPropertyNameCannotBeEmpty" xml:space="preserve">
    <value>Custom property name cannot be empty</value>
  </data>
  <data name="DateTitleCannotBeEmpty" xml:space="preserve">
    <value>Date title cannot be empty</value>
  </data>
  <data name="DepartmentCannotBeEmpty" xml:space="preserve">
    <value>Department cannot be empty</value>
  </data>
  <data name="DepartmentNameCannotBeEmpty" xml:space="preserve">
    <value>Department name cannot be empty</value>
  </data>
  <data name="DesignationNameCannotBeEmpty" xml:space="preserve">
    <value>Designation name cannot be empty</value>
  </data>
  <data name="EmailIdCannotBeEmpty" xml:space="preserve">
    <value>Email address cannot be empty</value>
  </data>
  <data name="InstantMessengerIdCannotBeEmpty" xml:space="preserve">
    <value>Instant messenger ID cannot be empty</value>
  </data>
  <data name="InvalidEmailAddress" xml:space="preserve">
    <value>Invalid email address format. The format of the email address is not correct</value>
  </data>
  <data name="InvalidUrl" xml:space="preserve">
    <value>Invalid Web URL format. The format of the Website URL is not correct</value>
  </data>
  <data name="LanguageCannotBeEmpty" xml:space="preserve">
    <value>Language cannot be empty</value>
  </data>
  <data name="NatureOfContactNameCannotBeEmpty" xml:space="preserve">
    <value>Nature of contact name cannot be empty</value>
  </data>
  <data name="PartyNameCannotBeEmpty" xml:space="preserve">
    <value>Party name cannot be empty</value>
  </data>
  <data name="PersonNameCannotBeEmpty" xml:space="preserve">
    <value>Person name cannot be empty</value>
  </data>
  <data name="PhoneLabelCannotBeEmpty" xml:space="preserve">
    <value>Phone title cannot be empty</value>
  </data>
  <data name="PhoneNrCannotBeEmpty" xml:space="preserve">
    <value>Phone number cannot be empty</value>
  </data>
  <data name="PhoneNrExceededMaxLength" xml:space="preserve">
    <value>Phone number exceeded max length: {0}</value>
  </data>
  <data name="ProfessionNameCannotBeEmpty" xml:space="preserve">
    <value>Profession name cannot be empty</value>
  </data>
  <data name="StateCodeCannotBeEmpty" xml:space="preserve">
    <value>State code cannot be empty</value>
  </data>
  <data name="StateNameCannotBeEmpty" xml:space="preserve">
    <value>State name cannot be empty</value>
  </data>
  <data name="WebsiteUrlCannotBeEmpty" xml:space="preserve">
    <value>Website URL cannot be empty</value>
  </data>
</root>