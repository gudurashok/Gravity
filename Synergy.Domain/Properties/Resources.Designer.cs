//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Synergy.Domain.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Synergy.Domain.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assigned by and assigned to user cannot be equal.
        /// </summary>
        internal static string AssignedByAndToUserCannotBeEqual {
            get {
                return ResourceManager.GetString("AssignedByAndToUserCannotBeEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to self.
        /// </summary>
        internal static string CannotAssignToSelf {
            get {
                return ResourceManager.GetString("CannotAssignToSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to stop Task #{0} and start Task #{1}
        ///
        ///
        ///NOTE: Choose &quot;No&quot; to stop Task #{0}.
        /// </summary>
        internal static string ChangeCurrentTask {
            get {
                return ResourceManager.GetString("ChangeCurrentTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChecklistItem name cannot be empty.
        /// </summary>
        internal static string ChecklistItemNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("ChecklistItemNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checklist name cannot be empty.
        /// </summary>
        internal static string ChecklistNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("ChecklistNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End date should be greater than or equal to start date.
        /// </summary>
        internal static string EndDateLessThanStartDate {
            get {
                return ResourceManager.GetString("EndDateLessThanStartDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid day of month.
        /// </summary>
        internal static string InvalidDayOfMonth {
            get {
                return ResourceManager.GetString("InvalidDayOfMonth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid recurrence pattern.
        /// </summary>
        internal static string InvalidRecurrencePattern {
            get {
                return ResourceManager.GetString("InvalidRecurrencePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location is in use by Task &quot;{0}&quot;.
        /// </summary>
        internal static string LocationInUse {
            get {
                return ResourceManager.GetString("LocationInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location name cannot be empty.
        /// </summary>
        internal static string LocationNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("LocationNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No changes were made.
        /// </summary>
        internal static string NoChangesMade {
            get {
                return ResourceManager.GetString("NoChangesMade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project is in use by Task &quot;{0}&quot;.
        /// </summary>
        internal static string ProjectInUse {
            get {
                return ResourceManager.GetString("ProjectInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project name cannot be empty.
        /// </summary>
        internal static string ProjectNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("ProjectNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reminder name cannot be empty.
        /// </summary>
        internal static string ReminderNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("ReminderNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to stop Task #{0}.
        /// </summary>
        internal static string RemoveCurrentTask {
            get {
                return ResourceManager.GetString("RemoveCurrentTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select a task.
        /// </summary>
        internal static string SelectTask {
            get {
                return ResourceManager.GetString("SelectTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select any weekday(s).
        /// </summary>
        internal static string SelectWeek {
            get {
                return ResourceManager.GetString("SelectWeek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to start Task #{0}.
        /// </summary>
        internal static string SetNewCurrentTask {
            get {
                return ResourceManager.GetString("SetNewCurrentTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The due date of a task cannot occur before its creation date..
        /// </summary>
        internal static string TaskCannotDueBeforeCreation {
            get {
                return ResourceManager.GetString("TaskCannotDueBeforeCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The due date of a task cannot occur before its start date..
        /// </summary>
        internal static string TaskCannotStartAfterDueDate {
            get {
                return ResourceManager.GetString("TaskCannotStartAfterDueDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sart date of a task cannot occur before its creation date..
        /// </summary>
        internal static string TaskCannotStartBeforeCreation {
            get {
                return ResourceManager.GetString("TaskCannotStartBeforeCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checklist is in use by Task &quot;{0}&quot;.
        /// </summary>
        internal static string TaskChecklistInUse {
            get {
                return ResourceManager.GetString("TaskChecklistInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task comment cannot be empty.
        /// </summary>
        internal static string TaskCommentCannotBeEmpty {
            get {
                return ResourceManager.GetString("TaskCommentCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task name cannot be empty.
        /// </summary>
        internal static string TaskNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("TaskNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task type is in use by Task &quot;{0}&quot;.
        /// </summary>
        internal static string TaskTypeInUse {
            get {
                return ResourceManager.GetString("TaskTypeInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task type name cannot be empty.
        /// </summary>
        internal static string TaskTypeNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("TaskTypeNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Template already exist.
        /// </summary>
        internal static string TemplateAlreadyExist {
            get {
                return ResourceManager.GetString("TemplateAlreadyExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Template name cannot be empty.
        /// </summary>
        internal static string TemplateNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("TemplateNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UserId cannot be blank.
        /// </summary>
        internal static string UserCannotBeBlank {
            get {
                return ResourceManager.GetString("UserCannotBeBlank", resourceCulture);
            }
        }
    }
}
